// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

package ai.vespa.searcher;

import ai.vespa.tokenizer.BertModelConfig;
import ai.vespa.tokenizer.BertTokenizer;
import com.yahoo.component.chain.Chain;
import com.yahoo.data.access.slime.SlimeAdapter;
import com.yahoo.language.simple.SimpleLinguistics;
import com.yahoo.prelude.query.NearestNeighborItem;
import com.yahoo.search.Result;
import com.yahoo.search.Searcher;
import com.yahoo.search.result.FeatureData;
import com.yahoo.search.result.Hit;
import com.yahoo.search.searchchain.Execution;
import com.yahoo.search.Query;
import com.yahoo.slime.Cursor;
import com.yahoo.slime.Slime;
import com.yahoo.tensor.Tensor;
import com.yahoo.tensor.TensorAddress;
import com.yahoo.tensor.TensorType;
import com.yahoo.tensor.serialization.TypedBinaryFormat;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.BitSet;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;


public class RetrievalModelSearcherTest {

    static BertModelConfig bertModelConfig;
    static BertTokenizer tokenizer;

    static {
        BertModelConfig.Builder builder = new BertModelConfig.Builder();
        builder.vocabulary(new com.yahoo.config.FileReference("src/test/resources/bert-base-uncased-vocab.txt")).max_input(128);
        bertModelConfig = builder.build();
        try {
            tokenizer = new BertTokenizer(bertModelConfig, new SimpleLinguistics());
        } catch (IOException e) {
            fail("Caught IO expcetion while loading bert model config");
        }
    }


    private Result execute(Query query, Searcher... searcher) {
        Execution execution = new Execution(new Chain<>(searcher), Execution.Context.createContextStub());
        return execution.search(query);
    }

    @Test
    public void test_searcher() {
        RetrievalModelSearcher retrievalModelSearcher = new RetrievalModelSearcher(tokenizer);
        MockBackend mock = new MockBackend();
        Query query = new Query("/search/?query=hello+nelson");

        Result r = execute(query, retrievalModelSearcher, mock);
        Optional<Tensor> t = query.getRanking().getFeatures().getTensor("query(query_embedding)");
        assertFalse(t.isEmpty());
        Tensor queryEmbedding = t.get();
        assertEquals(768, queryEmbedding.size());

        t = query.getRanking().getFeatures().getTensor("query(query_hash)");
        assertFalse(t.isEmpty(), "No query hash tensor");
        Tensor hashEmbedding = t.get();
        assertEquals(96, hashEmbedding.size());
        assertEquals("tensor<int8>(d0[96]):[103, 118, -54, -4, -100, -11, 86, -40, 86, -41, -26, -2, "
                + "-82, -80, -102, -53, 74, -75, -83, 122, 58, 100, 87, -5, 115, 39, -96, -2, 49, -22, 59, 69, -76, " +
                "74, 61, -2, -119, -28, -58, 17, -12, -89, 44, -13, -62, -67, 103, 32, 71, 60, 123, 51, -118, 38, 81," +
                " -70, -40, -95, -48, -126, 23, 113, -18, -79, -80, 72, -18, -102, 118, 64, 58, -75, -91, 94, 116, -123, 104" +
                ", -73, -5, -89, -115, -39, 123, -27, 71, -14, 50, 126, -98, -30, 85, 31, 45, -62, 70, -86]", hashEmbedding.toString());

        NearestNeighborItem nn = (NearestNeighborItem) query.getModel().getQueryTree().getRoot();
        assertEquals("hash", nn.getIndexName());
        assertEquals("query_hash", nn.getQueryTensorName());
    }


    private static class MockBackend extends Searcher {
        @Override
        public Result search(Query query, Execution execution) {
            if (isEncoderQuery(query)) {
                Result result = execution.search(query);
                result.setTotalHitCount(1);
                Hit hit = new Hit("query", 1.0);
                hit.setField("summaryfeatures", getFeatureData("rankingExpression(cls_embedding)"));
                result.hits().add(hit);
                return result;
            }
            return execution.search(query);
        }

        private boolean isEncoderQuery(Query query) {
            return query.getModel().getRestrict().contains("query");
        }
    }

    private static FeatureData getFeatureData(String name) {
        Cursor features = new Slime().setObject();
        Tensor.Builder b = Tensor.Builder.of(TensorType.fromSpec("tensor<float>(d2[768])"));
        for (int i = 0; i < 768; i++)
            b.cell(TensorAddress.of(i), clsEmbedding[i]);
        Tensor embedding = b.build();
        features.setData(name, TypedBinaryFormat.encode(embedding));
        return new FeatureData(new SlimeAdapter(features));
    }



    static double[] clsEmbedding = new double[] {
            -8.45924690e-02,  6.01639748e-02,  1.28954962e-01, -3.66017371e-02,
            -1.04838915e-01,  5.58911338e-02,  2.07176685e-01,  2.03107134e-01,
            -6.44453019e-02,  1.83439806e-01,  8.29995424e-02,  6.38527721e-02,
            -3.21343318e-02,  1.41885921e-01,  3.24232839e-02, -1.87440038e-01,
            4.97680195e-02,  7.32202083e-02, -6.41625598e-02, -7.44547993e-02,
            4.90286425e-02, -1.15627922e-01,  7.10091442e-02, -2.78323650e-01,
            2.21105799e-01,  5.83835952e-02,  2.52395272e-02,  1.86097652e-01,
            1.65733024e-02,  2.51339734e-01, -1.19681880e-01, -3.46926153e-02,
            7.21831806e-03, -1.47648677e-02, -2.69373246e-02,  1.71638615e-02,
            1.00867204e-01,  9.16750580e-02, -3.87665071e-03, -9.53418911e-02,
            2.75926471e-01,  8.18800554e-03,  3.92100029e-02,  1.58779830e-01,
            -9.36081186e-02,  3.97869349e-02, -6.68036759e-01,  1.95836917e-01,
            -1.19840622e-01,  4.61368486e-02, -1.13837868e-01,  2.01920033e-01,
            -5.12347594e-02,  4.52250801e-02,  1.33425653e-01, -8.04766640e-02,
            6.61383644e-02,  3.85741234e-01, -1.34915821e-02,  4.50409949e-02,
            1.25540718e-01, -1.20913386e-02, -4.90915403e-02, -8.39633122e-02,
            -1.41733557e-01,  8.40068609e-02, -1.58909452e-03,  1.44100897e-02,
            -1.10302225e-01,  1.90494746e-01,  5.97369187e-02, -4.15420607e-02,
            6.37576953e-02,  1.49126515e-01, -1.26988500e-01,  9.15262550e-02,
            -1.15086868e-01,  2.10756138e-01,  2.35489272e-02,  1.40499342e-02,
            1.65822908e-01,  3.25067341e-03,  9.19613391e-02, -3.61215174e-02,
            -9.35614854e-02,  1.29449755e-01,  9.00864452e-02, -2.18713246e-02,
            7.79145956e-02,  2.41668329e-01,  1.11486018e-02,  1.64892823e-02,
            1.31038442e-01,  2.25591451e-01,  1.24424234e-01, -2.91690737e-01,
            6.89311996e-02, -5.83133474e-02,  2.60770917e-01, -8.47170502e-02,
            1.03865176e-01,  4.61477414e-02,  1.89662427e-01, -3.04195508e-02,
            6.50396645e-02, -1.04179233e-01,  5.66364750e-02,  1.33141145e-01,
            -5.58079742e-02, -3.22636914e+00, -2.26837873e-01, -4.92898859e-02,
            5.02891168e-02, -3.55045497e-03, -5.30706719e-04,  3.55465919e-01,
            3.96862030e-01, -5.13201877e-02,  1.25125080e-01, -1.77694738e-01,
            1.33411810e-01,  7.57781684e-01, -1.85719624e-01, -4.92755212e-02,
            1.70153454e-01, -8.29909369e-03,  9.65737551e-02,  1.14610717e-01,
            -1.00829974e-01,  1.14111975e-01, -2.05105290e-01, -2.31305230e-02,
            2.16190025e-01, -2.67856009e-02,  1.41049027e-01, -1.66255161e-01,
            1.46556273e-01, -1.28132805e-01,  3.21472995e-02,  4.77088466e-02,
            -9.89288986e-02,  1.26497924e-01, -3.61987996e+00,  1.22783907e-01,
            1.38311759e-01, -4.85094823e-02,  5.38470037e-02, -2.13893190e-01,
            9.82554629e-02,  1.95759162e-02, -1.15250304e-01,  1.14891544e-01,
            -1.06798068e-01,  1.45553917e-01,  9.23732668e-02,  9.44734067e-02,
            2.33348966e-01, -3.71873938e-02,  2.08716616e-02, -8.43579397e-02,
            -1.61564257e-02, -3.03300731e-02,  1.03553236e-01,  5.74942119e-02,
            1.06347680e-01, -2.04935476e-01,  1.66675583e-01, -1.28851384e-01,
            -1.08791977e-01,  5.18342741e-02,  5.74335977e-02, -8.15098584e-02,
            -1.83028504e-01,  1.92589670e-01, -1.70319468e-01, -9.60520729e-02,
            -1.13218725e-02,  1.46445587e-01, -2.03646839e-01,  7.17008710e-02,
            -5.71666658e-03,  3.01285982e-01,  2.01396290e-02,  1.07972771e-01,
            4.01258543e-02,  9.21876580e-02,  1.87710181e-01,  9.63385627e-02,
            1.06983632e-02, -1.96013153e-01,  5.53972870e-02,  2.61205807e-02,
            -3.64627093e-02,  5.07617220e-02,  2.61492610e-01,  8.69389996e-03,
            -8.02823603e-02, -1.72368169e-01,  1.22638837e-01,  2.86831230e-01,
            -5.53257540e-02, -1.68909356e-01,  1.65282965e-01, -9.92337614e-03,
            -1.51195765e-01,  3.75901818e+00,  6.47207648e-02,  2.83144712e-02,
            2.23521784e-01, -1.38427675e-01,  8.34125131e-02, -7.42608607e-02,
            -8.11855942e-02, -3.01461779e-02, -7.36946762e-02, -6.11290932e-02,
            6.45067915e-03,  4.23724502e-02,  2.56180078e-01,  5.82761876e-02,
            1.58245862e-01,  1.86628461e-01,  8.35573301e-02, -6.25577420e-02,
            -4.91387844e-02, -7.12054372e-02,  4.03485894e-02,  8.40922222e-02,
            -1.07337371e-01, -3.10976148e-01, -9.44770947e-02,  7.66593218e-03,
            4.81106341e-02,  2.53127247e-01,  1.14842162e-01, -1.35938123e-01,
            3.09592113e-02, -4.55686189e-02,  3.79159927e-01, -8.31161439e-02,
            -4.46072966e-03, -1.48583233e-01,  4.93400469e-02,  3.23371470e-01,
            2.45047379e-02, -2.54458562e-02,  2.78988183e-01,  1.75152540e-01,
            -2.62041181e-01,  1.61115810e-01, -8.89810175e-02, -6.67119101e-02,
            -1.28373310e-01,  1.20508581e-01, -3.40030864e-02,  1.11897737e-02,
            7.26872087e-02, -8.85172188e-02,  8.09103698e-02,  8.27347562e-02,
            -3.44084054e-02,  2.67264992e-02, -4.71032299e-02, -5.43553755e-02,
            -3.58648226e-03,  1.03174053e-01, -2.41345465e-02, -1.13964438e-01,
            2.17946991e-01, -1.72179975e-02,  1.01494640e-02, -9.67151374e-02,
            -1.96742285e-02, -5.21828985e+00,  9.81700867e-02,  9.88044068e-02,
            1.19557805e-01,  4.33782823e-02, -2.02833980e-01,  5.97052425e-02,
            1.15329936e-01,  2.00063616e-01,  2.63132691e-01,  1.61443949e-01,
            9.80337337e-02,  3.18385363e-02,  2.96846479e-01, -2.03358471e-01,
            4.13404778e-02, -1.36292977e-02, -3.58617976e-02, -3.23743001e-03,
            4.93326411e-02, -2.85208616e-02, -4.31197844e-02,  3.17156948e-02,
            1.86641723e-01,  1.19277745e-01,  5.76441139e-02, -7.37265944e-02,
            -5.08427434e-02,  6.53978363e-02, -1.63590461e-01, -6.93445653e-03,
            3.80667076e-02,  8.43149573e-02, -8.54332298e-02, -1.70043539e-02,
            -2.70277214e+00,  5.18884808e-02,  8.30250904e-02, -1.59074888e-01,
            -8.57655704e-02, -1.57567933e-02, -1.84906200e-02,  1.95770413e-02,
            -1.76157713e-01, -8.04638714e-02, -1.39929727e-02,  5.35319671e-02,
            5.61470576e-02,  8.18053335e-02,  2.53205150e-02,  1.84255987e-01,
            -1.20473087e-01,  4.14524972e-03, -8.06717575e-02, -5.85913360e-02,
            1.36187792e-01, -8.84402841e-02,  2.54732929e-02, -1.12073123e-02,
            -1.36185795e-01,  2.36735031e-01,  2.14549862e-02,  8.94396976e-02,
            -1.18965097e-01, -9.23399627e-02,  8.32846910e-02, -4.61906195e-03,
            4.25578095e-03,  1.08973265e-01, -1.06849261e-02, -7.50577152e-02,
            8.37255120e-02,  8.97390991e-02,  2.29913563e-01,  5.22308722e-02,
            -4.20795567e-02, -6.09792992e-02,  1.06343664e-01,  1.85335502e-01,
            2.19891831e-01,  1.50356218e-02, -9.14072767e-02, -8.72198716e-02,
            -4.13697101e-02, -1.25923187e-01,  6.88977316e-02, -3.14848684e-03,
            9.66277003e-01, -6.78741038e-02,  2.02655718e-02,  1.62503898e-01,
            2.09849551e-01,  1.69418052e-01, -4.02777418e-02,  1.41148210e-01,
            -1.12439796e-01,  1.46320835e-01,  1.21707596e-01, -2.75388896e-01,
            -5.39082587e-02,  2.03838088e-02,  1.57971531e-02,  1.16133660e-01,
            -6.94406033e-02, -1.54619038e-01,  1.35800451e-01, -3.86443995e-02,
            -1.55865446e-01, -1.02863880e-02, -2.67904643e-02, -2.04575628e-01,
            -7.80598819e-02,  4.95083779e-02, -1.42439395e-01, -1.19949296e-01,
            -1.61482379e-01,  7.29803294e-02,  1.16623729e-01,  9.45955217e-02,
            -2.71378364e-03, -4.36288305e-02,  6.14264607e-03,  1.32331535e-01,
            1.44013748e-01,  1.50255010e-01, -5.87798953e-02, -1.00229569e-01,
            -2.70564109e-02,  4.21293452e-02,  2.74602562e-01,  6.26825243e-02,
            8.35673958e-02, -3.60030204e-01,  1.35494977e-01,  9.39658210e-02,
            -4.04258966e-02, -9.90934223e-02,  1.18569680e-01,  3.89591604e-02,
            -4.44444790e-02, -2.09794659e-02,  2.13114545e-03,  2.30873704e-01,
            1.17479332e-01, -1.44091889e-01, -4.12112102e-03, -1.68672707e-02,
            1.26431687e-02, -9.91932303e-02,  7.30768442e-01, -4.83879149e-02,
            -1.08298227e-01, -1.22396834e-01,  1.62697621e-02, -1.14785358e-01,
            -1.77600794e-02,  8.13372508e-02,  4.99397740e-02, -1.81051910e-01,
            -4.86792251e-02,  3.27303708e-02, -1.68892562e-01,  1.46229908e-01,
            -2.52772450e-01, -3.05815525e-02, -5.76426722e-02,  3.38960029e-02,
            1.42564237e-01, -3.26201916e-01,  1.45268627e-02,  5.91113307e-02,
            7.51051754e-02, -1.07227370e-01,  1.45563468e-01, -3.33646610e-02,
            1.81537464e-01,  1.67723730e-01, -1.99408270e-02,  4.51990128e-01,
            2.76220500e-01, -9.24783051e-02, -1.27606586e-01, -2.50638351e-02,
            8.66847932e-02, -9.28873941e-02,  3.84275988e-02, -3.58085744e-02,
            -1.31102562e-01, -4.65733260e-02, -1.20844468e-01,  2.21650153e-01,
            2.33667582e-01,  1.37692660e-01, -7.72568882e-02,  2.24255528e-02,
            -3.11132446e-02, -8.53601769e-02, -5.29629707e-01, -7.47916698e-02,
            6.47069439e-02, -1.06168449e-01, -3.34930271e-02, -3.77251953e-02,
            -2.96531245e-02, -8.09395611e-02,  2.56406158e-01, -9.11574662e-02,
            -1.73624679e-01, -2.05634371e-03, -8.52814019e-02,  7.41908401e-02,
            -8.25855061e-02,  1.21913999e-01,  2.30271429e-01,  7.60168806e-02,
            -3.16376276e-02,  9.84534621e-02,  8.32750574e-02,  3.08828712e-01,
            -2.10947663e-01, -1.52980164e-03, -9.68979597e-02,  1.48025468e-01,
            3.76803949e-02,  1.58401668e-01,  3.31541523e-02, -2.13615209e-01,
            1.85049064e-02,  1.07375700e-02,  8.14854354e-02, -7.04824477e-02,
            3.75450775e-02, -1.08704388e-01,  4.98119695e-03,  4.60971333e-03,
            -1.50168538e-01, -5.33756427e-02, -5.05400747e-02,  3.20438594e-02,
            1.22185610e-01, -1.35197446e-01,  3.38126630e-01,  1.28041804e-02,
            -1.27725080e-01, -1.03882559e-01, -6.24336265e-02, -1.18527852e-01,
            -1.12535581e-02,  6.45840093e-02, -5.48426025e-02, -2.53740922e-02,
            3.11121829e-02, -8.70526880e-02, -2.38407552e-02, -1.43903315e-01,
            2.68934935e-01,  9.65993330e-02,  3.25647891e-02, -1.40012413e-01,
            4.70333807e-02,  4.84066218e-01,  5.36054187e-02, -8.43417272e-02,
            1.12090394e-01, -2.55508155e-01, -3.76167335e-02,  3.24758627e-02,
            1.66803226e-02, -3.72134671e-02,  4.28634882e-02, -3.09797134e-02,
            -1.10096663e-01,  3.55110019e-02,  3.26848775e-03,  9.03256536e-02,
            -8.01047832e-02,  9.93639901e-02,  7.79500902e-02, -2.08522916e-01,
            -1.82464302e-01,  1.92559332e-01, -8.30068514e-02, -4.24490049e-02,
            -2.06676088e-02, -1.72386676e-01, -1.36068866e-01, -2.45927274e-03,
            -1.47917211e-01, -6.67928979e-02,  3.74829233e-01,  7.23748952e-02,
            5.52444309e-02, -2.04861816e-02,  3.37200202e-02, -1.16029799e-01,
            4.18662801e-02, -2.71552633e-02,  1.73492953e-02,  2.66445816e-01,
            -7.46316314e-02,  2.68445015e-02, -2.44527727e-01,  3.45236957e-02,
            4.92506623e-02, -2.65194513e-02,  5.05672842e-02, -2.00263131e-02,
            -8.22162330e-02,  2.22270131e-01, -5.76815568e-02,  1.58810481e-01,
            -8.58753361e-03,  1.60167724e-01, -6.50764704e-02,  1.25993565e-01,
            2.78701138e+00,  1.40999615e-01,  1.67231128e-01, -1.36519834e-01,
            -3.63678709e-02,  7.65206888e-02,  1.75175220e-01,  1.00833654e-01,
            -1.16898641e-01,  1.41506463e-01, -1.52421623e-01, -6.25557229e-02,
            3.52207944e-02, -7.47541413e-02, -5.44380099e-02, -7.92688280e-02,
            -1.07388899e-01,  1.17667429e-01, -6.24365956e-02,  2.25663558e-03,
            -1.01444036e-01,  5.16514853e-02,  9.13161859e-02, -2.04713851e-01,
            5.21110743e-02, -2.91991010e-02, -1.43688962e-01, -2.08921582e-01,
            5.41258119e-02, -2.12998852e-01,  9.23887193e-02,  1.61203533e-01,
            -1.11436635e-01,  1.89682677e-01,  7.92644769e-02,  4.20506895e-02,
            7.26586878e-02,  1.12071343e-01,  1.50632679e-01,  1.88965976e-01,
            5.06366882e-03, -1.72448084e-02,  6.80630505e-02,  9.19510722e-02,
            1.45020738e-01, -6.23151660e-04,  2.72641890e-02, -1.42113179e-01,
            -1.05258554e-01,  1.60900638e-01,  6.79535419e-03,  5.74190617e-02,
            8.99496675e-03, -4.47691083e-02, -1.29823133e-01, -3.22634935e-01,
            2.50549912e-02,  7.92292953e-02, -8.99546519e-02,  2.07908556e-01,
            2.54823357e-01,  2.60316599e-02, -7.26846009e-02,  3.91477384e-02,
            1.38622373e-01, -9.67831388e-02, -5.61646856e-02,  7.53464997e-02,
            -2.85963360e-02,  2.63175577e-01,  5.05064428e-02,  4.78377268e-02,
            2.19954699e-02, -9.75086540e-02,  9.01020169e-02,  2.03298762e-01,
            2.19918042e-03,  7.56976381e-03,  8.87266621e-02, -3.82963228e+00,
            -5.82495779e-02,  9.30239633e-03, -6.05783835e-02,  4.38241102e-02,
            -5.03715351e-02,  2.50638783e-01, -4.23450023e-04, -2.95169540e-02,
            -3.55257615e-02,  1.48025438e-01,  1.67149007e-01,  1.03372000e-01,
            3.40503603e-02,  1.11471556e-01,  1.58135742e-02,  2.12489247e-01,
            -2.80356437e-01, -8.50242749e-03,  1.26748100e-01, -1.25307292e-01,
            -7.94953629e-02, -3.98004204e-02,  1.10448040e-01,  7.96428844e-02,
            -1.32672545e-02, -4.00348864e-02,  3.49374302e-02, -8.19226354e-03,
            -1.12649091e-01,  3.87723856e-02,  6.60715625e-02,  1.27850398e-02,
            4.66235355e-02,  7.70892203e-02,  4.16013524e-02, -5.64394146e-03,
            8.16702247e-02, -6.86025061e-03, -1.14149973e-01,  9.40862074e-02,
            1.68775886e-01,  1.23874843e-03,  3.06615941e-02, -1.27918914e-01,
            7.56660402e-02,  1.27849385e-01,  1.17413387e-01, -8.22989866e-02,
            -3.94731909e-02, -1.71107680e-01,  3.07091847e-02, -1.06485091e-01,
            -3.88091803e-02,  1.83857381e-02, -1.28556993e-02,  1.42900646e-01,
            -9.61382315e-02,  1.12632424e-01, -3.47808972e-02,  7.06535578e-03,
            -1.80339903e-01, -1.46636620e-01, -6.55072480e-02,  1.41794398e-01,
            1.12025082e-01,  8.64884332e-02,  1.28652304e-02,  6.11359924e-02,
            -2.24067613e-01, -1.05317876e-01,  7.63878673e-02, -3.95276397e-02,
            1.62976831e-02,  1.21317707e-01, -6.35377541e-02,  4.97832298e-02,
            3.62535715e-01,  1.36370286e-01, -1.24045640e-01, -2.04353377e-01,
            -1.58871099e-01, -1.25972107e-01,  4.42290083e-02, -6.92567453e-02,
            -8.96513939e+00,  5.69230318e-03, -7.39850178e-02, -2.47522548e-01,
            -1.15562603e-01,  1.84038222e-01,  1.09796584e-01, -1.15883484e-01,
            1.07199773e-01, -9.73234475e-02,  1.36038363e-01, -3.05460393e-02,
            1.38773173e-01, -5.98303042e-03,  1.76633507e-01, -8.27811509e-02};

}