# Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

schema wiki {

  document wiki {

    field title type string {
      indexing: summary | index
      index: enable-bm25
    }

    field title_token_ids type tensor<float>(d0[256]) {
        indexing: summary | attribute
    }

    field text type string {
      indexing: summary | index
      index: enable-bm25
    }

    field text_token_ids type tensor<float>(d0[256]) {
      indexing: summary |attribute
    }

    field id type long {
      indexing: summary | attribute
    }

    #bpr hash
    field hash type tensor<int8>(d0[96]){
      indexing: attribute | index
      attribute {
        distance-metric:hamming
      }
      index {
        hnsw {
          max-links-per-node: 16
          neighbors-to-explore-at-insert: 200
        }
      }
    }

  }

  fieldset default {
    fields: title, text
  }

  onnx-model reader {
    file: files/reader.onnx
    input  input_ids: input_ids
    input  attention_mask: attention_mask
    output output_0: start_logits
    output output_1: end_logits
    output output_2: relevance_logits
  }

  rank-profile openqa {

    function input_ids() {
      expression: tokenInputIds(80, query(query_token_ids), attribute(title_token_ids), attribute(text_token_ids))
    }

    function token_type_ids() {
      expression: tokenTypeIds(80, query(query_token_ids), attribute(title_token_ids), attribute(text_token_ids))
    }

    function attention_mask() {
      expression: tokenAttentionMask(80, query(query_token_ids), attribute(title_token_ids), attribute(text_token_ids))
    }


    first-phase {
      expression: closeness(field, hash) #Replace with dot product when we can unpackbits from has
    }

    second-phase {
      rerank-count: 5
      expression: sum(onnxModel(reader).relevance_logits)
    }

    summary-features {
      onnxModel(reader).start_logits
      onnxModel(reader).end_logits
      input_ids # The input sequence with special tokens (CLS/SEP)
      firstPhase
    }
  }

  rank-profile sparse inherits openqa {
    first-phase {
      expression: bm25(text) + bm25(title)
    }
  }

  rank-profile dense inherits openqa {
    first-phase {
      expression: closeness(field, hash)
    }
  }


}
